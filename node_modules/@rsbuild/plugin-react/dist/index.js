import { createRequire } from 'module';
var require = createRequire(import.meta['url']);

var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// ../../node_modules/.pnpm/@modern-js+module-tools@2.52.0_eslint@9.4.0_typescript@5.4.5/node_modules/@modern-js/module-tools/shims/esm.js
import { fileURLToPath } from "url";
import path from "path";

// src/index.ts
import { getNodeEnv } from "@rsbuild/shared";

// src/react.ts
import path2 from "path";
import { SCRIPT_REGEX, deepmerge, isUsingHMR } from "@rsbuild/shared";
var modifySwcLoaderOptions = ({
  chain,
  CHAIN_ID,
  modifier
}) => {
  const ruleIds = [CHAIN_ID.RULE.JS, CHAIN_ID.RULE.JS_DATA_URI];
  for (const ruleId of ruleIds) {
    if (chain.module.rules.has(ruleId)) {
      const rule = chain.module.rule(ruleId);
      if (rule.uses.has(CHAIN_ID.USE.SWC)) {
        rule.use(CHAIN_ID.USE.SWC).tap(modifier);
      }
    }
  }
};
var applyBasicReactSupport = (api, options) => {
  const REACT_REFRESH_PATH = __require.resolve("react-refresh");
  api.modifyBundlerChain(async (chain, { CHAIN_ID, isDev, isProd: isProd2, target }) => {
    const config = api.getNormalizedConfig();
    const usingHMR = isUsingHMR(config, { isProd: isProd2, target });
    const reactOptions = {
      development: isDev,
      refresh: usingHMR,
      runtime: "automatic",
      ...options.swcReactOptions
    };
    modifySwcLoaderOptions({
      chain,
      CHAIN_ID,
      modifier: (opts) => {
        const extraOptions = {
          jsc: {
            parser: {
              syntax: "typescript",
              // enable supports for React JSX/TSX compilation
              tsx: true
            },
            transform: {
              react: reactOptions
            }
          }
        };
        return deepmerge(opts, extraOptions);
      }
    });
    if (!usingHMR) {
      return;
    }
    chain.resolve.alias.set("react-refresh", path2.dirname(REACT_REFRESH_PATH));
    const { default: ReactRefreshRspackPlugin } = await import("@rspack/plugin-react-refresh");
    chain.plugin(CHAIN_ID.PLUGIN.REACT_FAST_REFRESH).use(ReactRefreshRspackPlugin, [
      {
        include: [SCRIPT_REGEX],
        ...options.reactRefreshOptions
      }
    ]);
  });
};
var applyReactProfiler = (api) => {
  api.modifyRsbuildConfig((config, { mergeRsbuildConfig }) => {
    const enableProfilerConfig = {
      output: {
        minify: {
          jsOptions: {
            // Need to keep classnames and function names like Components for debugging purposes.
            mangle: {
              keep_classnames: true,
              keep_fnames: true
            }
          }
        }
      }
    };
    return mergeRsbuildConfig(config, enableProfilerConfig);
  });
  api.modifyBundlerChain((chain) => {
    chain.resolve.alias.set("react-dom$", "react-dom/profiling");
    chain.resolve.alias.set("scheduler/tracing", "scheduler/tracing-profiling");
  });
};

// src/splitChunks.ts
import { createCacheGroups, isPlainObject, isProd } from "@rsbuild/shared";
var applySplitChunksRule = (api, options = {
  react: true,
  router: true
}) => {
  api.modifyBundlerChain((chain) => {
    const config = api.getNormalizedConfig();
    if (config.performance.chunkSplit.strategy !== "split-by-experience") {
      return;
    }
    const currentConfig = chain.optimization.splitChunks.values();
    if (!isPlainObject(currentConfig)) {
      return;
    }
    const extraGroups = {};
    if (options.react) {
      extraGroups.react = [
        "react",
        "react-dom",
        "scheduler",
        ...isProd() ? [] : ["react-refresh", /@rspack[\\/]plugin-react-refresh/]
      ];
    }
    if (options.router) {
      extraGroups.router = [
        "react-router",
        "react-router-dom",
        "history",
        /@remix-run[\\/]router/
      ];
    }
    if (!Object.keys(extraGroups).length) {
      return;
    }
    chain.optimization.splitChunks({
      ...currentConfig,
      cacheGroups: {
        ...currentConfig.cacheGroups,
        ...createCacheGroups(extraGroups)
      }
    });
  });
};

// src/index.ts
var PLUGIN_REACT_NAME = "rsbuild:react";
var pluginReact = ({
  enableProfiler = false,
  ...options
} = {}) => ({
  name: PLUGIN_REACT_NAME,
  setup(api) {
    if (api.context.bundlerType === "rspack") {
      applyBasicReactSupport(api, options);
      const isProdProfile = enableProfiler && getNodeEnv() === "production";
      if (isProdProfile) {
        applyReactProfiler(api);
      }
    }
    applySplitChunksRule(api, options?.splitChunks);
  }
});
export {
  PLUGIN_REACT_NAME,
  pluginReact
};
