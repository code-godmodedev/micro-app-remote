name: Deploy to S3

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      new_version:
        required: true
        type: string
    outputs:
      project_name:
        description: "The S3 website URL"
        value: ${{ jobs.deploy_to_s3.outputs.project_name }}

jobs:
  deploy_to_s3:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ env.project_name }}
    permissions:
      id-token: write
      contents: write

    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: no

      - name: Extract project name
        id: extract_project_name
        run: echo "project_name=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Create S3 bucket if it does not exist
        run: |
          BUCKET_NAME="${{ env.project_name }}-${{ inputs.environment }}-v3"
          if ! aws s3api list-buckets --query "Buckets[?Name=='$BUCKET_NAME'].Name" --output text | grep -q "$BUCKET_NAME"; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            aws s3api put-public-access-block --bucket "$BUCKET_NAME" --public-access-block-configuration '{
              "BlockPublicAcls": false,
              "IgnorePublicAcls": false,
              "BlockPublicPolicy": false,
              "RestrictPublicBuckets": false
            }'
            aws s3api put-bucket-policy --bucket "$BUCKET_NAME" --policy '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PublicAccessPolicy",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:ListBucketMultipartUploads"
                  ],
                  "Resource": [
                    "arn:aws:s3:::'"$BUCKET_NAME"'",
                    "arn:aws:s3:::'"$BUCKET_NAME"'/*"
                  ]
                }
              ]
            }'
            aws s3 website s3://"$BUCKET_NAME" --index-document index.html --error-document error.html
          fi

      - name: Upload dist folder to S3
        run: |
          BUCKET_NAME="${{ env.project_name }}-${{ inputs.environment }}-v3"
          aws s3 sync dist/ s3://$BUCKET_NAME/${{ inputs.new_version }} --delete

      # - name: Get S3 website URL and output
      #   id: get_s3_url
      #   env: 
      #     BUCKET_NAME: ${{ env.project_name }}-${{ inputs.environment }}-v3
      #     VERSION: ${{ inputs.new_version }}
      #     REGION: ${{ secrets.AWS_REGION }}
      #   run: |
      #     # BUCKET_NAME="${{ env.project_name }}-${{ inputs.environment }}-v3"
      #     # VERSION=${{ inputs.new_version }}

      #     # Construct website URL
      #     WEBSITE_URL="http://$BUCKET_NAME.s3-website.$REGION.amazonaws.com/$VERSION/"

      #     echo "link=$WEBSITE_URL" >> $GITHUB_ENV
