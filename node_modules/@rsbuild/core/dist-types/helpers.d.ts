import { type MultiStats, type RspackChain, type Stats, type StatsError, isMultiCompiler } from '@rsbuild/shared';
import type { StatsCompilation, StatsValue } from '@rspack/core';
export declare const rspackMinVersion = "0.6.2";
export declare const isSatisfyRspackVersion: (originalVersion: string) => Promise<boolean>;
export declare const getCompiledPath: (packageName: string) => string;
export declare const getAllStatsErrors: (statsData: StatsCompilation) => StatsError[] | undefined;
export declare const getAllStatsWarnings: (statsData: StatsCompilation) => StatsError[] | undefined;
export declare function getStatsOptions(compiler: Parameters<typeof isMultiCompiler>[0]): StatsValue | undefined;
export declare function formatStats(stats: Stats | MultiStats, options?: StatsValue): {
    message: string;
    level: string;
} | {
    message?: undefined;
    level?: undefined;
};
export declare const formatPublicPath: (publicPath: string, withSlash?: boolean) => string;
export declare const getPublicPathFromChain: (chain: RspackChain, withSlash?: boolean) => string;
/**
 * ensure absolute file path.
 * @param base - Base path to resolve relative from.
 * @param filePath - Absolute or relative file path.
 * @returns Resolved absolute file path.
 */
export declare const ensureAbsolutePath: (base: string, filePath: string) => string;
export declare const isFileSync: (filePath: string) => boolean | undefined;
export declare function isEmptyDir(path: string): boolean;
/**
 * Find first already exists file.
 * @param files - Absolute file paths with extension.
 * @returns The file path if exists, or false if no file exists.
 */
export declare const findExists: (files: string[]) => string | false;
export declare function isFileExists(file: string): Promise<boolean>;
